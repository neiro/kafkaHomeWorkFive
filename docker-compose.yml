version: '3.8'

services:

  kafka-client:
    build: 
      context: .
      dockerfile: Dockerfile-client
    image: kafka-client:latest
    command: >
      # Описывает топик my_topic в Kafka
      kafka-topics --bootstrap-server rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:9091
      --command-config /client.properties
      --describe --topic my_topic
    volumes:
      - ./client.properties:/client.properties:ro  # Подключаем конфиг с параметрами клиента Kafka

  kafka-client-2:
    build: 
      context: .
      dockerfile: Dockerfile-client
    image: kafka-client:latest
    command: >
      # Читает сообщения из Kafka-топика с самого начала
      /usr/bin/kafka-console-consumer --bootstrap-server rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:9091
      --topic my_topic
      --consumer.config /client.properties
      --from-beginning
    volumes:
      - ./client.properties:/client.properties:ro  # Подключаем конфиг клиента

  schema-initializer:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: schema-initializer
    environment:
      # Настройки подключения к Schema Registry
      - SCHEMA_REGISTRY_URL=https://rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:443
      - SCHEMA_REGISTRY_USER=producer
      - SCHEMA_REGISTRY_PASSWORD=kafkaSuperPuper
    networks:
      - kafka-network

  kafka-producer:
    build:
      context: ./kafka-java-project
      dockerfile: Dockerfile-producer
    environment:
      # Список серверов Kafka-брокеров
      - BOOTSTRAP_SERVERS=rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:9091,...
      - TOPIC=my_topic  # Топик, в который отправляются сообщения
      - PRODUCER_USER=producer
      - PRODUCER_PASSWORD=kafkaSuperPuper
      - TRUSTSTORE_LOCATION=/etc/security/ssl
      - TRUSTSTORE_PASSWORD=kafkaSuperPuper
      - SCHEMA_REGISTRY_URL=https://rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:443
      - SCHEMA_REGISTRY_USER=producer
      - SCHEMA_REGISTRY_PASSWORD=kafkaSuperPuper
    depends_on:
      - schema-initializer  # Убеждаемся, что Schema Registry инициализирован перед запуском продюсера
    networks:
      - kafka-network

  kafka-consumer:
    build:
      context: ./kafka-java-project
      dockerfile: Dockerfile-consumer
    environment:
      # Подключение к Kafka для чтения сообщений
      - BOOTSTRAP_SERVERS=rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:9091,...
      - TOPIC=my_topic  # Читаемый топик
      - CONSUMER_USER=consumer
      - CONSUMER_PASSWORD=kafkaSuperPuper
      - TRUSTSTORE_LOCATION=/etc/security/ssl
      - TRUSTSTORE_PASSWORD=kafkaSuperPuper
      - SCHEMA_REGISTRY_URL=https://rc1a-8e5f2ghbbopnsf26.mdb.yandexcloud.net:443
      - SCHEMA_REGISTRY_USER=consumer
      - SCHEMA_REGISTRY_PASSWORD=kafkaSuperPuper
    depends_on:
      - schema-initializer  # Сначала должен быть инициализирован Schema Registry
    networks:
      - kafka-network

  nifi:
    build:
      context: .
      dockerfile: Dockerfile-nifi
    container_name: nifi
    ports:
      - "8080:8080"  # Порт доступа к NiFi UI
    networks:
      - kafka-network
    environment:
      # Конфигурация NiFi
      NIFI_WEB_HTTP_PORT: 8080  # Открытый HTTP-порт
      JAVA_TOOL_OPTIONS: "-Xms8g -Xmx8g -Djavax.net.ssl.trustStore=/opt/nifi/conf/truststore.jks -Djavax.net.ssl.trustStorePassword=kafkaSuperPuper"
      NIFI_CLUSTER_IS_NODE: "false"  # NiFi работает в режиме одиночного узла
      NIFI_SENSITIVE_PROPS_KEY: "yourSensitivePropsKey"  # Ключ для шифрования чувствительных данных
    volumes:
      - ./nifi_data:/opt/nifi/nifi-current/data  # Директория для хранения данных NiFi
    restart: unless-stopped  # Перезапуск контейнера при сбое

networks:
  kafka-network:
    driver: bridge  # Используется bridge-сеть для взаимодействия сервисов